{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Form","props","useState","name","setName","number","setNumber","count","setCount","id","onChange","event","target","value","onClick","e","App","list","setList","fresh","setFresh","useEffect","a","axios","get","data","console","log","makeTable","fetchData","flag","person","put","then","response","document","getElementById","innerHTML","postData","updateData","post","alert","array","map","key","deletePerson","delete","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17bdf2d7.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios'\n\nfunction Form(props) {\nconst [name, setName] = useState('')\nconst [number, setNumber] = useState('')\nconst [count, setCount] = useState(0)\n\nconst handleName = (event) => {\n   setName(event.target.value)\n  }\n\n  const handleNumber = (event) => {\n   setNumber(event.target.value)\n  }\n\nconst addContact = () => {\nsetCount(e => e + 1)\nprops.name(name)\nprops.number(number)\nprops.count(count)\n}\n\nreturn (\n<div>\n <h1>Phonebook</h1>\n    <label> Name: </label>\n    <input id=\"personName\" onChange={handleName}/> <br/><br/>\n    <label>Number: </label>\n    <input id=\"personNumber\" onChange={handleNumber}/><br/><br/>\n    <button id=\"addButton\" onClick={addContact}>Add Contact</button>\n</div>\n);\n\n}\n\nfunction App() {\nconst [list, setList] = useState('')\nconst [name, setName] = useState('')\nconst [number, setNumber] = useState('')\nconst [count, setCount] = useState(-1)\nconst [fresh, setFresh] = useState(0)\n\n    useEffect(() => {\n    const fetchData = async () => {\n    const { data } = await axios.get(`/api/persons`);\n    console.log(data)\n     makeTable(data);\n    }; fetchData();\n  },[fresh]);\n\n    useEffect(() => {\n    const updateData = async () => {\n    const { data } = await axios.get(`/api/persons`);\n    let flag = true\n    for (let person of data){\n    if (person.name === name){  \n    try{\n    await axios.put(`/api/persons/${person.id}`, {\n    name: name,\n    number: number,\n  })\n  .then(function (response) {\n  setFresh(e => e + 1)\n  if(person.number != number){\n  document.getElementById('response').innerHTML = response.data;\n  } else {\n  document.getElementById('response').innerHTML = `Contact ${person.name} is already up to date!`;\n  }\n  flag = false\n  })\n}catch(error){\n console.log(error)\n}\n}}\n  if(flag){\n  postData()\n  }\n}; updateData();\n}, [count]);\n  \n\nconst postData = async () => {\n  if(count !== -1){\n    try{\n    await axios.post(`/api/persons/`, {\n    name: name,\n    number: number,\n  })\n  .then(function (response) {\n  setFresh(e => e + 1)\n  document.getElementById('response').innerHTML = response.data;\n  })\n}catch(error){\n alert(error)\n}}\n}\n\n  const makeTable = (data) => {\n  let array = data.map(e =>\n  <tr key={e.id}>\n<td>{e.name}</td>\n<td>{e.number}</td>\n<td><button onClick={() => deletePerson(e.id)}>Delete</button></td>\n  </tr>\n  )\n  setList(array)\n  }\n\n\nconst deletePerson = async (id) => {\nconsole.log(id)\nawait axios.delete(`/api/persons/${id}`)\n.then(function (response) {\ndocument.getElementById('response').innerHTML = response.data;\nsetFresh(e => e + 1)\n})\n}\n\n\n  return (\n<div>\n<Form count={(e) => setCount(e)} name={(e) => setName(e)} number={(e) => setNumber(e)}/>\n<p id=\"response\"></p>\n<table>\n<tbody>\n<tr>\n<th>Name:</th>\n<th>Number:</th>\n<th></th>\n</tr>\n{list}\n</tbody>\n</table>\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}